{"version":3,"sources":["components/Calculator.js","serviceWorker.js","index.js"],"names":["Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","number_of_disk","disk_size","raid_type","handleChange","bind","assertThisInitialized","handleSubmit","event","new_state","target","id","parseFloat","value","setState","result","window","alert","concat","preventDefault","react_default","a","createElement","onSubmit","htmlFor","className","type","min","onChange","selected","Component","Boolean","location","hostname","match","ReactDOM","render","components_Calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c90961f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../scss/Calculator.scss\"\n\nclass Calculator extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      number_of_disk: \"\",\n      disk_size: \"\",\n      raid_type: 0\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    var new_state = {};\n\n    new_state[event.target.id] = parseFloat(event.target.value);\n    this.setState(new_state);\n  }\n\n  handleSubmit(event) {\n    var result = 0;\n\n    if (this.state.number_of_disk >= 2) {\n      switch (this.state.raid_type) {\n        case 0:\n          result = this.state.disk_size * this.state.number_of_disk;\n          break;\n        case 1:\n          result = this.state.disk_size;\n          break;\n        case 5:\n          if (this.number_of_disk >= 4) {\n            result = this.state.disk_size * (this.state.number_of_disk - 1);\n          } else {\n            result = \"RAID 5 must have at least 4 disks\";\n          }\n          break;\n        case 6:\n          if (this.number_of_disk >= 5) {\n            result = this.state.disk_size * (this.state.number_of_disk - 2);\n          } else {\n            result = \"RAID 6 must have at least 5 disks\";\n          }\n          break;\n        default:\n          result = \"Error?!\";\n          break;\n      }\n    } else {\n      result = \"You must have 2 disks for building an RAID array\";\n    }\n\n    window.alert(`${this.state.disk_size} GB ${this.state.number_of_disk} disks on RAID ${this.state.raid_type}: ${result} GB`);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <header>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"number_of_disk\"\n                 className=\"siimple-label\">Number of disk</label> <br />\n          <input type=\"number\"\n                 id=\"number_of_disk\"\n                 className=\"siimple-input siimple-input--fluid\"\n                 min=\"2\"\n                 value={this.state.number_of_disk}\n                 onChange={this.handleChange} />\n          <br />\n\n          <label htmlFor=\"disk_size\"\n                 className=\"siimple-label\">Disk size</label> <br />\n          <input type=\"number\"\n                 id=\"disk_size\"\n                 className=\"siimple-input siimple-input--fluid\"\n                 min=\"1\"\n                 value={this.state.disk_size}\n                 onChange={this.handleChange} />\n          <br />\n\n          <label htmlFor=\"number_of_disk\"\n                 className=\"siimple-label\">Number of disk</label> <br />\n          <select id=\"raid_type\"\n                  className=\"siimple-select siimple-select--fluid\"\n                  value={this.state.raid_type}\n                  onChange={this.handleChange}>\n            <option value=\"0\"\n                    selected>RAID 0</option>\n            <option value=\"1\">RAID 1</option>\n            <option value=\"5\">RAID 5</option>\n            <option value=\"6\">RAID 6</option>\n          </select> <br /> <br />\n\n          <input type=\"submit\"\n                 className=\"siimple-btn siimple-btn--primary\" />\n          <input type=\"reset\"\n                 className=\"siimple-btn\" />\n        </form>\n      </header>\n    );\n  }\n}\n\nexport default Calculator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React    from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./scss/index.scss\";\n\nimport Calculator from \"./components/Calculator\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Calculator />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}